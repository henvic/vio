// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/henvic/vio (interfaces: DB)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -package mock -destination internal/mock/mock.go . DB
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	net "net"
	reflect "reflect"

	vio "github.com/henvic/vio"
	gomock "go.uber.org/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// LookupLocation mocks base method.
func (m *MockDB) LookupLocation(arg0 context.Context, arg1 net.IP) (*vio.Geolocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupLocation", arg0, arg1)
	ret0, _ := ret[0].(*vio.Geolocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupLocation indicates an expected call of LookupLocation.
func (mr *MockDBMockRecorder) LookupLocation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupLocation", reflect.TypeOf((*MockDB)(nil).LookupLocation), arg0, arg1)
}
